import{bX as _,r as d,bn as B,bu as C,aY as I,b3 as g,H as x,m as A,bY as O,N as S,K as E,bW as D,u as T,c as U}from"./entry.r3LHacCz.js";const H=r=>r==="defer"||r===!1;function w(...r){var v;const i=typeof r[r.length-1]=="string"?r.pop():void 0;typeof r[0]!="string"&&r.unshift(i);let[a,c,e={}]=r;if(typeof a!="string")throw new TypeError("[nuxt] [asyncData] key must be a string.");if(typeof c!="function")throw new TypeError("[nuxt] [asyncData] handler must be a function.");const t=A(),p=()=>null,y=()=>t.isHydrating?t.payload.data[a]:t.static.data[a];e.server=e.server??!0,e.default=e.default??p,e.getCachedData=e.getCachedData??y,e.lazy=e.lazy??!1,e.immediate=e.immediate??!0,e.deep=e.deep??_.deep,e.dedupe=e.dedupe??"cancel";const f=()=>![null,void 0].includes(e.getCachedData(a));if(!t._asyncData[a]||!e.immediate){(v=t.payload._errors)[a]??(v[a]=null);const o=e.deep?d:B;t._asyncData[a]={data:o(e.getCachedData(a)??e.default()),pending:d(!f()),error:C(t.payload._errors,a),status:d("idle")}}const s={...t._asyncData[a]};s.refresh=s.execute=(o={})=>{if(t._asyncDataPromises[a]){if(H(o.dedupe??e.dedupe))return t._asyncDataPromises[a];t._asyncDataPromises[a].cancelled=!0}if((o._initial||t.isHydrating&&o._initial!==!1)&&f())return Promise.resolve(e.getCachedData(a));s.pending.value=!0,s.status.value="pending";const u=new Promise((n,l)=>{try{n(c(t))}catch(b){l(b)}}).then(n=>{if(u.cancelled)return t._asyncDataPromises[a];let l=n;e.transform&&(l=e.transform(n)),e.pick&&(l=M(l,e.pick)),t.payload.data[a]=l,s.data.value=l,s.error.value=null,s.status.value="success"}).catch(n=>{if(u.cancelled)return t._asyncDataPromises[a];s.error.value=O(n),s.data.value=S(e.default()),s.status.value="error"}).finally(()=>{u.cancelled||(s.pending.value=!1,delete t._asyncDataPromises[a])});return t._asyncDataPromises[a]=u,t._asyncDataPromises[a]};const h=()=>s.refresh({_initial:!0}),P=e.server!==!1&&t.payload.serverRendered;{const o=E();if(o&&!o._nuxtOnBeforeMountCbs){o._nuxtOnBeforeMountCbs=[];const n=o._nuxtOnBeforeMountCbs;o&&(I(()=>{n.forEach(l=>{l()}),n.splice(0,n.length)}),g(()=>n.splice(0,n.length)))}P&&t.isHydrating&&(s.error.value||f())?(s.pending.value=!1,s.status.value=s.error.value?"error":"success"):o&&(t.payload.serverRendered&&t.isHydrating||e.lazy)&&e.immediate?o._nuxtOnBeforeMountCbs.push(h):e.immediate&&h(),e.watch&&x(e.watch,()=>s.refresh());const u=t.hook("app:data:refresh",async n=>{(!n||n.includes(a))&&await s.refresh()});o&&g(u)}const m=Promise.resolve(t._asyncDataPromises[a]).then(()=>s);return Object.assign(m,s),m}function M(r,i){const a={};for(const c of i)a[c]=r[c];return a}function R(r){return $fetch("http://localhost:3001/players/Player",{method:"POST",body:{tag:r}})}function k(){return $fetch("https://api.brawlapi.com/v1/brawlers",{method:"GET"})}function $(){return $fetch("https://api.brawlapi.com/v1/icons",{method:"GET"})}const j=D("UserInfoStore",()=>{const r=T(),i=d(),a=U(()=>{if(i.value)return i.value.brawlers});async function c(t){const{data:p}=await w("postPlayerAPI",()=>R(t));console.log(p.value);const{code:y,message:f,dataInfo:s}=p.value;switch(y){case 200:e(s),r.push({path:"userPage"});return;default:alert(f);return}}function e(t){i.value=t}return{UserInfo:i,UserBrawlers:a,setUserInfo:e,submitTag:c}}),G=D("BrawlersStore",()=>{const r=d([]);async function i(){const{data:c}=await w("getAllBrawlersAPI",()=>k()),{list:e}=c.value;e&&a(e)}function a(c){r.value=c}return{Brawlers:r,getAllBrawlers:i}});export{G as a,w as b,$ as g,j as u};
